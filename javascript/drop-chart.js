// Generated by CoffeeScript 1.3.3
(function() {
  var $,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  /*
  Drop Chart is a plug-in intended to allow for sinple d3 charts to easily be put into any html system.
  */


  $.extend($.fn, {
    dropchart: function(drop_arg, obj_hash) {
      debugger;
      var Chart, ChartFetcher, Pie, paletteFactory;
      ChartFetcher = (function() {

        function ChartFetcher() {}

        ChartFetcher.prototype.charts = [];

        ChartFetcher.prototype.render = function() {
          this.raw_charts = this.fetchCharts();
          this.cleanCharts();
          return this.getChartsByType();
        };

        ChartFetcher.prototype.cleanCharts = function() {
          var chart, _i, _len, _ref, _results;
          _ref = this.raw_charts;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            chart = _ref[_i];
            _results.push(jQuery(chart).find('svg').remove());
          }
          return _results;
        };

        ChartFetcher.prototype.getChartsByType = function() {
          var chart, _i, _len, _ref, _results;
          _ref = this.raw_charts;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            chart = _ref[_i];
            if (jQuery(chart).attr('data-type') === 'pie') {
              _results.push(this.charts.push(new Pie(chart)));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        ChartFetcher.prototype.setScope = function(dom_obj) {
          this.dom_obj = dom_obj;
        };

        ChartFetcher.prototype.fetchCharts = function() {
          return jQuery(this.dom_obj);
        };

        return ChartFetcher;

      })();
      Chart = (function() {

        function Chart(raw) {
          this.raw = raw;
          this.palFac = new paletteFactory();
          debugger;
          this.palette = this.palFac.getPalette('earth');
          this.type = jQuery(this.raw).attr('data-type');
          this.source = jQuery(this.raw).attr('data-source');
          this.fetchData();
          this.draw();
        }

        Chart.prototype.fetchData = function() {
          return this.data = window[this.source];
        };

        return Chart;

      })();
      Pie = (function(_super) {

        __extends(Pie, _super);

        function Pie() {
          return Pie.__super__.constructor.apply(this, arguments);
        }

        Pie.prototype.processData = function() {
          var datum, lab, processed, val, _i, _len, _ref, _ref1;
          processed = [];
          if (this.data.length) {
            _ref = this.data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              datum = _ref[_i];
              processed.push({
                label: '',
                value: datum
              });
            }
            return [processed];
          } else {
            _ref1 = this.data;
            for (lab in _ref1) {
              val = _ref1[lab];
              processed.push({
                label: lab,
                value: val
              });
            }
            return [processed];
          }
        };

        Pie.prototype.draw = function() {
          var arc, arcs, color, h, pie, r, vis, w;
          w = 1000;
          h = 1000;
          r = 450;
          color = this.palette;
          vis = d3.select(this.raw).append("svg:svg").data(this.processData()).attr("width", w).attr("height", h).append("svg:g").attr("transform", "translate(" + r + "," + r + ")");
          arc = d3.svg.arc().outerRadius(r);
          pie = d3.layout.pie().value(function(d) {
            return d.value;
          });
          arcs = vis.selectAll("g.slice").data(pie).enter().append("svg:g").attr("class", "slice");
          arcs.append("svg:path").attr("fill", function(d, i) {
            return color(i);
          }).attr("d", arc);
          return arcs.append("svg:text").attr("transform", function(d) {
            d.innerRadius = 0;
            d.outerRadius = r;
            return "translate(" + arc.centroid(d) + ")";
          }).attr("text-anchor", "middle").text(function(d) {
            return d.data.label;
          });
        };

        return Pie;

      })(Chart);
      paletteFactory = (function() {

        paletteFactory.prototype.palettes = {};

        function paletteFactory() {
          this.palettes['basic'] = function(i) {
            var colors;
            colors = ["#bc1c5a", "#096ab1", "#f2cf57", "#199468", "#f7230e", "#5f64c8", "#d8f20d", "#12cfb1", "#ffcd04", "#c56156", "#53548e", "#845194", "#4cb9bc", "#2bb673", "#ff9600", "#c72f48", "#65286b", "#69db45", "#0a8dc1", "#fda819", "#ff88df", "#b5ed2c", "#fcf5a5"];
            return colors[i % colors.length];
          };
          this.palettes['cool'] = function(i) {
            var colors;
            colors = ["#26499d", "#92b8e9", "#4b6cbb", "#d4f0ff", "#99b8fb", "#a3cfff", "#0b3eb3", "#5b86f7", "#cbdee2", "#9ec5cc", "#697fef", "#2f50c1", "#6db2ff", "#6691ef", "#d5f0ff", "#7db5d0", "#99c0dd", "#4584c9", "#9dbdfa", "#2d6dd7"];
            return colors[i % colors.length];
          };
          this.palettes['warm'] = function(i) {
            var colors;
            colors = ["#ffae1a", "#d0361c", "#c52108", "#f47202", "#dba602", "#cd270f", "#fcd37b", "#ffb314", "#d10909", "#ffc511", "#ec6d20", "#e2ab97", "#b96632", "#d10909", "#ea7741", "#fc3200", "#ffb64c", "#790908", "#d01a0d", "#ffd109"];
            return colors[i % colors.length];
          };
          this.palettes['earth'] = function(i) {
            var colors;
            colors = ["#fbad25", "#8f511e", "#55763f", "#bd8b68", "#bb3e28", "#d4801e", "#ffc233", "#616d01", "#e6c236", "#c4d032", "#325a42", "#702f11", "#6db2ff", "#953d27", "#8dab9f", "#b8b580", "#99c296", "#4584c9", "#732123", "#903837"];
            return colors[i % colors.length];
          };
          this.palettes['category10'] = d3.scale.category10();
          this.palettes['category20'] = d3.scale.category20();
          this.palettes['category20b'] = d3.scale.category20b();
          this.palettes['category20c'] = d3.scale.category20c();
        }

        paletteFactory.prototype.registerNewPalette = function(paletteName, palette) {
          return this.palettes[paletteName] = palette;
        };

        paletteFactory.prototype.getPalette = function(palette) {
          if (palette == null) {
            return this.palettes['basic'];
          } else {
            return this.palettes[palette];
          }
        };

        return paletteFactory;

      })();
      /*
            Load up our data object with all needed code and extend jQuery such that it can be called for each calls.
      */

      if (obj_hash) {
        obj_hash.data = obj_hash;
      } else {
        obj_hash = {};
      }
      obj_hash.dropobjects = {
        chartfetcher: ChartFetcher,
        chart: Chart,
        pie: Pie
      };
      $.extend(drop_arg, obj_hash);
      return this.each(function() {
        var chartfetcher, clean_arg;
        chartfetcher = new obj_hash.dropobjects.chartfetcher();
        chartfetcher.setScope(this);
        if (drop_arg == null) {
          return chartfetcher.render();
        } else {
          /*
                    We have arguments, these may be:
                    String -> bind to String event to run the scan
                    String, hash -> execute String method and pass hash
          */

          clean_arg = String(drop_arg);
          if (obj_hash != null) {
            return this;
          } else {
            debugger;
            this.on(clean_arg, function() {
              return chartfetcher.render();
            });
            return this;
          }
        }
      });
    }
  });

}).call(this);
